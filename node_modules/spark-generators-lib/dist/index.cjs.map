{"version":3,"sources":["../packages/index.ts","../packages/java-generator/index.ts","../packages/java-generator/entity/index.ts","../packages/java-generator/entity/config-generator.ts","../packages/shared/ast.ts","../packages/shared/generator-utils.ts","../packages/java-generator/entity/debezium-generator.ts","../packages/java-generator/entity/enum-generator.ts","../packages/java-generator/entity/generator.ts","../packages/java-generator/entity/module-generator.ts","../packages/shared/relations.ts","../packages/java-generator/entity/model-generator.ts","../packages/java-generator/entity/sql-generator.ts","../packages/java-generator/webservice/index.ts","../packages/java-generator/webservice/config-generator.ts","../packages/java-generator/webservice/generator.ts","../packages/java-generator/webservice/module-generator.ts","../packages/java-generator/webservice/graphql-generator.ts","../packages/java-generator/documentation/generators.ts"],"sourcesContent":["export * as java from \"./java-generator/index.js\";","export * as entity from \"./entity/index.js\";\r\nexport * as webservice from \"./webservice/index.js\";\r\nexport * from \"./documentation/index.js\";\r\n","export * from \"./config-generator.js\";\r\nexport * from \"./debezium-generator.js\";\r\nexport * from \"./enum-generator.js\";\r\nexport * from \"./generator.js\";\r\nexport * from \"./model-generator.js\";\r\nexport * from \"./module-generator.js\";\r\nexport * from \"./sql-generator.js\";\r\n","import path from 'path'\nimport fs from 'fs'\nimport { Configuration, Model, ModuleImport, isModuleImport } from '../../shared/ast.js'\nimport { createPath } from '../../shared/generator-utils.js'\nimport { Generated, expandToStringWithNL, toString } from 'langium/generate'\n\nexport function generateConfigs(model: Model, target_folder: string) {\n  \n \n  if (model.configuration){\n    \n    const RESOURCE_PATH = createPath(target_folder, \"src/main/resources\")\n    fs.writeFileSync(path.join(target_folder, 'settings.xml'), toString(generateSettings()))\n    fs.writeFileSync(path.join(target_folder, 'pom.xml'), toString(generatePOMXML(model)))\n    fs.writeFileSync(path.join(RESOURCE_PATH, 'logback.xml'), toString(generatelogback()))\n    fs.writeFileSync(path.join(RESOURCE_PATH, 'application.properties'), toString(applicationProperties(model.configuration)))\n\n\n  }\n  \n}\n\nfunction generateSettings():Generated{\n  return expandToStringWithNL`\n    <settings>\n    <servers>\n      <server>\n        <id>gitlab-maven</id>\n        <configuration>\n          <httpHeaders>\n            <property>\n              <name>Private-Token</name>\n              <value>\\${CI_JOB_TOKEN}</value>\n            </property>\n          </httpHeaders>\n        </configuration>\n      </server>   \n    </servers>\n  </settings>`\n}\n\nfunction applicationProperties(configuration: Configuration):Generated{\n  return expandToStringWithNL`\n  spring.datasource.initialization-mode=always\n  spring.datasource.url =  jdbc:postgresql://localhost:5432/${configuration.database_name?.toLocaleLowerCase()}\n  spring.datasource.username = postgres\n  spring.datasource.password = postgres\n  spring.datasource.platform= postgres\n  #spring.jpa.hibernate.ddl-auto = update\n  spring.jpa.hibernate.ddl-auto = create-drop\n  \n  spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata\n  spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create-drop\n  spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=sql/${configuration.database_name?.toLowerCase()}.sql\n  spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=sql/${configuration.database_name?.toLowerCase()}.sql\n\n  `\n}\nfunction generatelogback(): Generated{\n  return expandToStringWithNL`\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <configuration>\n      <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n          <encoder>\n              <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n              </pattern>\n          </encoder>\n      </appender>\n\n      <root level=\"INFO\">\n          <appender-ref ref=\"STDOUT\" />\n      </root>\n  </configuration>\n  `\n}\n\nfunction generatePOMXML(application: Model) : Generated {\n  return expandToStringWithNL`\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.1.0</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>${application.configuration?.package_path}.entity</groupId>\n\t<artifactId>${application.configuration?.name?.toLocaleLowerCase()}</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>${application.configuration?.name?.toLocaleLowerCase()}</name>\n\t<description>${application.configuration?.description}</description>\n\t<properties>\n\t\t<java.version>17</java.version>    \n\t</properties>\n\n  <repositories>\n  <repository>\n    <id>gitlab-maven</id>\n    <url>https://gitlab.com/api/v4/groups/#ADDGROUPID/-/packages/maven</url>\n  </repository>\n\n</repositories>\n\n<distributionManagement>\n  <repository>\n    <id>gitlab-maven</id>\n    <url>https://gitlab.com/api/v4/projects/#ADDPROJECTID/packages/maven</url>\n  </repository>\n  <snapshotRepository>\n    <id>gitlab-maven</id>\n    <url>https://gitlab.com/api/v4/projects/#ADDPROJECTID/packages/maven</url>\n  </snapshotRepository>\n</distributionManagement>\n\n\n\n\t<dependencies>\n\t\t\n    ${application.abstractElements.filter(isModuleImport).map(moduleImport => generateOntologyDependency(moduleImport)).join(\"\\n\")}\n  \n\n    <dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\n    <dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n    <dependency>\n        <groupId>org.postgresql</groupId>\n        <artifactId>postgresql</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-commons</artifactId>\n    </dependency>\n\n\t</dependencies>\n\n\n</project>\n  `\n}\n\nfunction generateOntologyDependency(moduleImported: ModuleImport):Generated{\n  \n  return expandToStringWithNL`\n  <dependency>\n  <groupId>${moduleImported.package_path?.toLowerCase()}</groupId>\n  <artifactId>${moduleImported.library?.toLowerCase()}</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n</dependency>\n  `\n}\n\n\n\n","/******************************************************************************\r\n * This file was generated by langium-cli 3.0.3.\r\n * DO NOT EDIT MANUALLY!\r\n ******************************************************************************/\r\n\r\n/* eslint-disable */\r\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';\r\nimport { AbstractAstReflection } from 'langium';\r\n\r\nexport const SPARKTerminals = {\r\n    WS: /\\s+/,\r\n    ID: /[_a-zA-Z][\\w_]*/,\r\n    INT: /[0-9]+/,\r\n    STRING: /\"[^\"]*\"|'[^']*'/,\r\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\r\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\r\n};\r\n\r\nexport type AbstractElement = EnumX | Module;\r\n\r\nexport const AbstractElement = 'AbstractElement';\r\n\r\nexport function isAbstractElement(item: unknown): item is AbstractElement {\r\n    return reflection.isInstance(item, AbstractElement);\r\n}\r\n\r\nexport type DATATYPE = 'boolean' | 'cnpj' | 'cpf' | 'currency' | 'date' | 'datetime' | 'decimal' | 'email' | 'file' | 'integer' | 'mobilePhoneNumber' | 'phoneNumber' | 'string' | 'uuid' | 'void' | 'zipcode';\r\n\r\nexport function isDATATYPE(item: unknown): item is DATATYPE {\r\n    return item === 'string' || item === 'integer' || item === 'decimal' || item === 'datetime' || item === 'date' || item === 'boolean' || item === 'uuid' || item === 'email' || item === 'cpf' || item === 'cnpj' || item === 'zipcode' || item === 'currency' || item === 'mobilePhoneNumber' || item === 'phoneNumber' || item === 'file' || item === 'void';\r\n}\r\n\r\nexport type Entity = ImportedEntity | LocalEntity;\r\n\r\nexport const Entity = 'Entity';\r\n\r\nexport function isEntity(item: unknown): item is Entity {\r\n    return reflection.isInstance(item, Entity);\r\n}\r\n\r\nexport type FEATURE_TYPE = 'authentication';\r\n\r\nexport function isFEATURE_TYPE(item: unknown): item is FEATURE_TYPE {\r\n    return item === 'authentication';\r\n}\r\n\r\nexport type LANGUAGETYPE = 'csharp-clean-architecture' | 'csharp-minimal-api' | 'java' | 'python';\r\n\r\nexport function isLANGUAGETYPE(item: unknown): item is LANGUAGETYPE {\r\n    return item === 'python' || item === 'java' || item === 'csharp-minimal-api' || item === 'csharp-clean-architecture';\r\n}\r\n\r\nexport type QualifiedName = string;\r\n\r\nexport function isQualifiedName(item: unknown): item is QualifiedName {\r\n    return typeof item === 'string';\r\n}\r\n\r\nexport type QualifiedNameWithWildcard = string;\r\n\r\nexport function isQualifiedNameWithWildcard(item: unknown): item is QualifiedNameWithWildcard {\r\n    return typeof item === 'string';\r\n}\r\n\r\nexport type Relation = ManyToMany | ManyToOne | OneToMany | OneToOne;\r\n\r\nexport const Relation = 'Relation';\r\n\r\nexport function isRelation(item: unknown): item is Relation {\r\n    return reflection.isInstance(item, Relation);\r\n}\r\n\r\nexport type UseCaseElements = Actor | UseCase;\r\n\r\nexport const UseCaseElements = 'UseCaseElements';\r\n\r\nexport function isUseCaseElements(item: unknown): item is UseCaseElements {\r\n    return reflection.isInstance(item, UseCaseElements);\r\n}\r\n\r\nexport interface Actor extends AstNode {\r\n    readonly $container: UseCasesModel;\r\n    readonly $type: 'Actor';\r\n    comment?: string;\r\n    fullName?: string;\r\n    id: QualifiedName;\r\n    superType?: Reference<Actor>;\r\n}\r\n\r\nexport const Actor = 'Actor';\r\n\r\nexport function isActor(item: unknown): item is Actor {\r\n    return reflection.isInstance(item, Actor);\r\n}\r\n\r\nexport interface Attribute extends AstNode {\r\n    readonly $container: LocalEntity;\r\n    readonly $type: 'Attribute';\r\n    blank: boolean;\r\n    comment?: string;\r\n    fullName?: string;\r\n    max?: number;\r\n    min?: number;\r\n    name: string;\r\n    type: DATATYPE;\r\n    unique: boolean;\r\n}\r\n\r\nexport const Attribute = 'Attribute';\r\n\r\nexport function isAttribute(item: unknown): item is Attribute {\r\n    return reflection.isInstance(item, Attribute);\r\n}\r\n\r\nexport interface AttributeEnum extends AstNode {\r\n    readonly $container: EnumX;\r\n    readonly $type: 'AttributeEnum';\r\n    comment?: string;\r\n    fullName?: string;\r\n    name: string;\r\n}\r\n\r\nexport const AttributeEnum = 'AttributeEnum';\r\n\r\nexport function isAttributeEnum(item: unknown): item is AttributeEnum {\r\n    return reflection.isInstance(item, AttributeEnum);\r\n}\r\n\r\nexport interface Configuration extends AstNode {\r\n    readonly $container: Model;\r\n    readonly $type: 'Configuration';\r\n    database_name?: string;\r\n    description?: string;\r\n    entity?: Reference<Entity>;\r\n    feature?: FEATURE_TYPE;\r\n    language?: LANGUAGETYPE;\r\n    name?: string;\r\n    package_path?: LANGUAGETYPE;\r\n}\r\n\r\nexport const Configuration = 'Configuration';\r\n\r\nexport function isConfiguration(item: unknown): item is Configuration {\r\n    return reflection.isInstance(item, Configuration);\r\n}\r\n\r\nexport interface Element extends AstNode {\r\n    readonly $container: Parameter;\r\n    readonly $type: 'Element';\r\n    comment?: string;\r\n    name: string;\r\n    type: DATATYPE;\r\n}\r\n\r\nexport const Element = 'Element';\r\n\r\nexport function isElement(item: unknown): item is Element {\r\n    return reflection.isInstance(item, Element);\r\n}\r\n\r\nexport interface EnumEntityAtribute extends AstNode {\r\n    readonly $container: LocalEntity;\r\n    readonly $type: 'EnumEntityAtribute';\r\n    comment?: string;\r\n    name: string;\r\n    type: Reference<EnumX>;\r\n}\r\n\r\nexport const EnumEntityAtribute = 'EnumEntityAtribute';\r\n\r\nexport function isEnumEntityAtribute(item: unknown): item is EnumEntityAtribute {\r\n    return reflection.isInstance(item, EnumEntityAtribute);\r\n}\r\n\r\nexport interface EnumX extends AstNode {\r\n    readonly $container: Model | Module;\r\n    readonly $type: 'EnumX';\r\n    attributes: Array<AttributeEnum>;\r\n    comment?: string;\r\n    name: string;\r\n}\r\n\r\nexport const EnumX = 'EnumX';\r\n\r\nexport function isEnumX(item: unknown): item is EnumX {\r\n    return reflection.isInstance(item, EnumX);\r\n}\r\n\r\nexport interface Event extends AstNode {\r\n    readonly $container: UseCase;\r\n    readonly $type: 'Event';\r\n    action?: string;\r\n    depends: Array<Reference<Event>>;\r\n    description?: string;\r\n    id: string;\r\n    name_fragment?: string;\r\n}\r\n\r\nexport const Event = 'Event';\r\n\r\nexport function isEvent(item: unknown): item is Event {\r\n    return reflection.isInstance(item, Event);\r\n}\r\n\r\nexport interface FunctionEntity extends AstNode {\r\n    readonly $container: LocalEntity;\r\n    readonly $type: 'FunctionEntity';\r\n    comment?: string;\r\n    name: string;\r\n    paramters: Array<Parameter>;\r\n    response: DATATYPE;\r\n}\r\n\r\nexport const FunctionEntity = 'FunctionEntity';\r\n\r\nexport function isFunctionEntity(item: unknown): item is FunctionEntity {\r\n    return reflection.isInstance(item, FunctionEntity);\r\n}\r\n\r\nexport interface ImportedEntity extends AstNode {\r\n    readonly $container: ModuleImport;\r\n    readonly $type: 'ImportedEntity';\r\n    name: string;\r\n}\r\n\r\nexport const ImportedEntity = 'ImportedEntity';\r\n\r\nexport function isImportedEntity(item: unknown): item is ImportedEntity {\r\n    return reflection.isInstance(item, ImportedEntity);\r\n}\r\n\r\nexport interface LocalEntity extends AstNode {\r\n    readonly $container: Module;\r\n    readonly $type: 'LocalEntity';\r\n    attributes: Array<Attribute>;\r\n    comment?: string;\r\n    enumentityatributes: Array<EnumEntityAtribute>;\r\n    functions: Array<FunctionEntity>;\r\n    is_abstract: boolean;\r\n    name: string;\r\n    relations: Array<Relation>;\r\n    superType?: Reference<Entity>;\r\n}\r\n\r\nexport const LocalEntity = 'LocalEntity';\r\n\r\nexport function isLocalEntity(item: unknown): item is LocalEntity {\r\n    return reflection.isInstance(item, LocalEntity);\r\n}\r\n\r\nexport interface ManyToMany extends AstNode {\r\n    readonly $container: LocalEntity;\r\n    readonly $type: 'ManyToMany';\r\n    by?: Reference<LocalEntity>;\r\n    comment?: string;\r\n    fullName?: string;\r\n    name: string;\r\n    type: Reference<Entity>;\r\n}\r\n\r\nexport const ManyToMany = 'ManyToMany';\r\n\r\nexport function isManyToMany(item: unknown): item is ManyToMany {\r\n    return reflection.isInstance(item, ManyToMany);\r\n}\r\n\r\nexport interface ManyToOne extends AstNode {\r\n    readonly $container: LocalEntity;\r\n    readonly $type: 'ManyToOne';\r\n    comment?: string;\r\n    fullName?: string;\r\n    name: string;\r\n    type: Reference<Entity>;\r\n}\r\n\r\nexport const ManyToOne = 'ManyToOne';\r\n\r\nexport function isManyToOne(item: unknown): item is ManyToOne {\r\n    return reflection.isInstance(item, ManyToOne);\r\n}\r\n\r\nexport interface Model extends AstNode {\r\n    readonly $type: 'Model';\r\n    abstractElements: Array<AbstractElement | ModuleImport | UseCasesModel>;\r\n    configuration?: Configuration;\r\n}\r\n\r\nexport const Model = 'Model';\r\n\r\nexport function isModel(item: unknown): item is Model {\r\n    return reflection.isInstance(item, Model);\r\n}\r\n\r\nexport interface Module extends AstNode {\r\n    readonly $container: Model | Module;\r\n    readonly $type: 'Module';\r\n    comment?: string;\r\n    elements: Array<AbstractElement | LocalEntity>;\r\n    name: QualifiedName;\r\n}\r\n\r\nexport const Module = 'Module';\r\n\r\nexport function isModule(item: unknown): item is Module {\r\n    return reflection.isInstance(item, Module);\r\n}\r\n\r\nexport interface ModuleImport extends AstNode {\r\n    readonly $container: Model;\r\n    readonly $type: 'ModuleImport';\r\n    entities: Array<ImportedEntity>;\r\n    library: string;\r\n    name: string;\r\n    package_path: string;\r\n}\r\n\r\nexport const ModuleImport = 'ModuleImport';\r\n\r\nexport function isModuleImport(item: unknown): item is ModuleImport {\r\n    return reflection.isInstance(item, ModuleImport);\r\n}\r\n\r\nexport interface OneToMany extends AstNode {\r\n    readonly $container: LocalEntity;\r\n    readonly $type: 'OneToMany';\r\n    comment?: string;\r\n    fullName?: string;\r\n    name: string;\r\n    type: Reference<Entity>;\r\n}\r\n\r\nexport const OneToMany = 'OneToMany';\r\n\r\nexport function isOneToMany(item: unknown): item is OneToMany {\r\n    return reflection.isInstance(item, OneToMany);\r\n}\r\n\r\nexport interface OneToOne extends AstNode {\r\n    readonly $container: LocalEntity;\r\n    readonly $type: 'OneToOne';\r\n    comment?: string;\r\n    fullName?: string;\r\n    name: string;\r\n    type: Reference<Entity>;\r\n}\r\n\r\nexport const OneToOne = 'OneToOne';\r\n\r\nexport function isOneToOne(item: unknown): item is OneToOne {\r\n    return reflection.isInstance(item, OneToOne);\r\n}\r\n\r\nexport interface Parameter extends AstNode {\r\n    readonly $container: FunctionEntity;\r\n    readonly $type: 'Parameter';\r\n    comment?: string;\r\n    element: Array<Element> | Element;\r\n}\r\n\r\nexport const Parameter = 'Parameter';\r\n\r\nexport function isParameter(item: unknown): item is Parameter {\r\n    return reflection.isInstance(item, Parameter);\r\n}\r\n\r\nexport interface UseCase extends AstNode {\r\n    readonly $container: UseCasesModel;\r\n    readonly $type: 'UseCase';\r\n    actors: Array<Reference<Actor>>;\r\n    comment?: string;\r\n    description?: string;\r\n    events: Array<Event>;\r\n    id: QualifiedName;\r\n    name_fragment: string;\r\n    superType?: Reference<UseCase>;\r\n}\r\n\r\nexport const UseCase = 'UseCase';\r\n\r\nexport function isUseCase(item: unknown): item is UseCase {\r\n    return reflection.isInstance(item, UseCase);\r\n}\r\n\r\nexport interface UseCasesModel extends AstNode {\r\n    readonly $container: Model;\r\n    readonly $type: 'UseCasesModel';\r\n    comment?: string;\r\n    elements: Array<UseCaseElements>;\r\n    id: QualifiedName;\r\n}\r\n\r\nexport const UseCasesModel = 'UseCasesModel';\r\n\r\nexport function isUseCasesModel(item: unknown): item is UseCasesModel {\r\n    return reflection.isInstance(item, UseCasesModel);\r\n}\r\n\r\nexport type SPARKAstType = {\r\n    AbstractElement: AbstractElement\r\n    Actor: Actor\r\n    Attribute: Attribute\r\n    AttributeEnum: AttributeEnum\r\n    Configuration: Configuration\r\n    Element: Element\r\n    Entity: Entity\r\n    EnumEntityAtribute: EnumEntityAtribute\r\n    EnumX: EnumX\r\n    Event: Event\r\n    FunctionEntity: FunctionEntity\r\n    ImportedEntity: ImportedEntity\r\n    LocalEntity: LocalEntity\r\n    ManyToMany: ManyToMany\r\n    ManyToOne: ManyToOne\r\n    Model: Model\r\n    Module: Module\r\n    ModuleImport: ModuleImport\r\n    OneToMany: OneToMany\r\n    OneToOne: OneToOne\r\n    Parameter: Parameter\r\n    Relation: Relation\r\n    UseCase: UseCase\r\n    UseCaseElements: UseCaseElements\r\n    UseCasesModel: UseCasesModel\r\n}\r\n\r\nexport class SPARKAstReflection extends AbstractAstReflection {\r\n\r\n    getAllTypes(): string[] {\r\n        return ['AbstractElement', 'Actor', 'Attribute', 'AttributeEnum', 'Configuration', 'Element', 'Entity', 'EnumEntityAtribute', 'EnumX', 'Event', 'FunctionEntity', 'ImportedEntity', 'LocalEntity', 'ManyToMany', 'ManyToOne', 'Model', 'Module', 'ModuleImport', 'OneToMany', 'OneToOne', 'Parameter', 'Relation', 'UseCase', 'UseCaseElements', 'UseCasesModel'];\r\n    }\r\n\r\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\r\n        switch (subtype) {\r\n            case Actor:\r\n            case UseCase: {\r\n                return this.isSubtype(UseCaseElements, supertype);\r\n            }\r\n            case EnumX:\r\n            case Module: {\r\n                return this.isSubtype(AbstractElement, supertype);\r\n            }\r\n            case ImportedEntity:\r\n            case LocalEntity: {\r\n                return this.isSubtype(Entity, supertype);\r\n            }\r\n            case ManyToMany:\r\n            case ManyToOne:\r\n            case OneToMany:\r\n            case OneToOne: {\r\n                return this.isSubtype(Relation, supertype);\r\n            }\r\n            default: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getReferenceType(refInfo: ReferenceInfo): string {\r\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\r\n        switch (referenceId) {\r\n            case 'Actor:superType':\r\n            case 'UseCase:actors': {\r\n                return Actor;\r\n            }\r\n            case 'Configuration:entity':\r\n            case 'LocalEntity:superType':\r\n            case 'ManyToMany:type':\r\n            case 'ManyToOne:type':\r\n            case 'OneToMany:type':\r\n            case 'OneToOne:type': {\r\n                return Entity;\r\n            }\r\n            case 'EnumEntityAtribute:type': {\r\n                return EnumX;\r\n            }\r\n            case 'Event:depends': {\r\n                return Event;\r\n            }\r\n            case 'ManyToMany:by': {\r\n                return LocalEntity;\r\n            }\r\n            case 'UseCase:superType': {\r\n                return UseCase;\r\n            }\r\n            default: {\r\n                throw new Error(`${referenceId} is not a valid reference id.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTypeMetaData(type: string): TypeMetaData {\r\n        switch (type) {\r\n            case 'Actor': {\r\n                return {\r\n                    name: 'Actor',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'fullName' },\r\n                        { name: 'id' },\r\n                        { name: 'superType' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'Attribute': {\r\n                return {\r\n                    name: 'Attribute',\r\n                    properties: [\r\n                        { name: 'blank', defaultValue: false },\r\n                        { name: 'comment' },\r\n                        { name: 'fullName' },\r\n                        { name: 'max' },\r\n                        { name: 'min' },\r\n                        { name: 'name' },\r\n                        { name: 'type' },\r\n                        { name: 'unique', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case 'AttributeEnum': {\r\n                return {\r\n                    name: 'AttributeEnum',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'fullName' },\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'Configuration': {\r\n                return {\r\n                    name: 'Configuration',\r\n                    properties: [\r\n                        { name: 'database_name' },\r\n                        { name: 'description' },\r\n                        { name: 'entity' },\r\n                        { name: 'feature' },\r\n                        { name: 'language' },\r\n                        { name: 'name' },\r\n                        { name: 'package_path' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'Element': {\r\n                return {\r\n                    name: 'Element',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'EnumEntityAtribute': {\r\n                return {\r\n                    name: 'EnumEntityAtribute',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'EnumX': {\r\n                return {\r\n                    name: 'EnumX',\r\n                    properties: [\r\n                        { name: 'attributes', defaultValue: [] },\r\n                        { name: 'comment' },\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'Event': {\r\n                return {\r\n                    name: 'Event',\r\n                    properties: [\r\n                        { name: 'action' },\r\n                        { name: 'depends', defaultValue: [] },\r\n                        { name: 'description' },\r\n                        { name: 'id' },\r\n                        { name: 'name_fragment' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'FunctionEntity': {\r\n                return {\r\n                    name: 'FunctionEntity',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'name' },\r\n                        { name: 'paramters', defaultValue: [] },\r\n                        { name: 'response' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'ImportedEntity': {\r\n                return {\r\n                    name: 'ImportedEntity',\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'LocalEntity': {\r\n                return {\r\n                    name: 'LocalEntity',\r\n                    properties: [\r\n                        { name: 'attributes', defaultValue: [] },\r\n                        { name: 'comment' },\r\n                        { name: 'enumentityatributes', defaultValue: [] },\r\n                        { name: 'functions', defaultValue: [] },\r\n                        { name: 'is_abstract', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'relations', defaultValue: [] },\r\n                        { name: 'superType' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'ManyToMany': {\r\n                return {\r\n                    name: 'ManyToMany',\r\n                    properties: [\r\n                        { name: 'by' },\r\n                        { name: 'comment' },\r\n                        { name: 'fullName' },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'ManyToOne': {\r\n                return {\r\n                    name: 'ManyToOne',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'fullName' },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'Model': {\r\n                return {\r\n                    name: 'Model',\r\n                    properties: [\r\n                        { name: 'abstractElements', defaultValue: [] },\r\n                        { name: 'configuration' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'Module': {\r\n                return {\r\n                    name: 'Module',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'ModuleImport': {\r\n                return {\r\n                    name: 'ModuleImport',\r\n                    properties: [\r\n                        { name: 'entities', defaultValue: [] },\r\n                        { name: 'library' },\r\n                        { name: 'name' },\r\n                        { name: 'package_path' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'OneToMany': {\r\n                return {\r\n                    name: 'OneToMany',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'fullName' },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'OneToOne': {\r\n                return {\r\n                    name: 'OneToOne',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'fullName' },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'Parameter': {\r\n                return {\r\n                    name: 'Parameter',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'element' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'UseCase': {\r\n                return {\r\n                    name: 'UseCase',\r\n                    properties: [\r\n                        { name: 'actors', defaultValue: [] },\r\n                        { name: 'comment' },\r\n                        { name: 'description' },\r\n                        { name: 'events', defaultValue: [] },\r\n                        { name: 'id' },\r\n                        { name: 'name_fragment' },\r\n                        { name: 'superType' }\r\n                    ]\r\n                };\r\n            }\r\n            case 'UseCasesModel': {\r\n                return {\r\n                    name: 'UseCasesModel',\r\n                    properties: [\r\n                        { name: 'comment' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'id' }\r\n                    ]\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    name: type,\r\n                    properties: []\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const reflection = new SPARKAstReflection();\r\n","import path from \"path\";\nimport fs from 'fs'\nimport { AstNode } from \"langium\";\nimport { Entity, Model, Module, ModuleImport, isModel } from \"./ast.js\";\n\n/**\n * Capitaliza uma string\n * \n * @param str - String a ser capitalizada\n * @returns A string capitalizada\n */\nexport function capitalizeString(str: string) : string {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\n/**\n * Aplica `path.join` nos argumentos passados, e cria o caminho gerado caso não exista\n * \n * @param args - Caminho para ser construído\n * @returns O caminho construído e normalizado, o mesmo retorno que `path.join(args)`\n */\n\nexport const ident_size = 4;\nexport const base_ident = ' '.repeat(ident_size);\n\nexport function createPath(...args: string[]) : string {\n  const PATH = path.join(...args)\n  if(!fs.existsSync(PATH)) {\n    fs.mkdirSync(PATH, { recursive: true })\n  }\n  return PATH\n}\n\n/**\n * Ordena topologicamente um DAG.\n * \n * Referência: https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search\n * @param nodes - Conjuntos de nós que denotam um grafo\n * @param fn - Função que recebe um nó `N` e retorna um iterável dos nós que PRECEDEM `N`.\n * Se a função for dos nós que devem suceder `N`, passe `reverse=true`\n * @param reverse - Booleano que define se a ordenação deve ser feita ao contrário.\n * Passe `reverse=true` se sua função `fn` retorna os sucessores do nó, ao invés dos antecessores\n * \n * @returns Um array, contendo os nós de `nodes` ordenados topologicamente\n * \n * @throws {Error} Se houver um ciclo em `nodes`, tornando a ordenação impossível\n */\nexport function topologicalSort<T extends AstNode>(nodes: Iterable<T>, fn: (a: T) => Iterable<T>, reverse?: boolean) : T[] {\n  const permantent_marked = new Set<T>()\n  const temporary_marked = new Set<T>()\n  const ordering: T[] = []\n  const visit = (node: T) => {\n      if(permantent_marked.has(node)) {\n          return\n      }\n      if(temporary_marked.has(node)) {\n          throw new Error(\"Não foi possível ordenar topologicamente. Ciclo encontrado\");\n      }\n\n      temporary_marked.add(node)\n      for(const n of fn(node)) {\n          visit(n)\n      }\n      temporary_marked.delete(node)\n\n      permantent_marked.add(node)\n      ordering.push(node)\n  }\n\n  for(const n of nodes) {\n      visit(n)\n  }\n\n  return reverse ? ordering.reverse() : ordering\n}\n\n/**\n* Checa se o nó de um grafo é parte de um ciclo.\n* Apenas para grafos com grau de saída 1 ou menor em cada nó\n* \n* Usando o algoritmo da Lebre e da Tartaruga (Floyd)\n* \n* @param start_node Nó inicial\n* @param sucessor_function Função que recebe um nó e retorna o nó sucessor, ou undefined caso não haja sucessor.\n* Sempre que um nó não houver sucessor, não existe ciclo envolvendo esse nó\n* @returns Um booleano, dizendo se foi encontrado ciclo\n*/\nexport function cycleFinder<T extends AstNode>(\n  start_node: T,\n  sucessor_function: (node: T) => T | undefined\n) : boolean {\n  let hare:   T | undefined = start_node\n  let turtle: T | undefined = start_node\n  while(hare !== undefined && turtle !== undefined) {\n      hare = sucessor_function(hare)\n      if(hare === undefined) {\n          break\n      }\n      hare   = sucessor_function(hare)\n      turtle = sucessor_function(turtle)\n      if(turtle === hare) {\n          return true\n      }\n  }\n  return false\n}\n\n/**\n* Dado um Entity que tenha nome, retorna o qualified name completo\n*/\nexport function getQualifiedName(e: Entity) : string {\n  let qualified_name = e.name\n  let parent: Module | ModuleImport | Model = e.$container\n  while(!isModel(parent)) {\n      qualified_name = `${parent.name}.${qualified_name}`\n      parent = parent.$container\n  }\n  return qualified_name\n}\n","import path from 'path'\nimport fs from 'fs'\nimport { Configuration, Model, isLocalEntity, isModule } from '../../shared/ast.js'\nimport { createPath } from '../../shared/generator-utils.js'\nimport { Generated, expandToStringWithNL, toString } from 'langium/generate'\n\nexport function generateDebezium(model: Model, target_folder: string) {\n\n    if (model.configuration){\n  \n        const name = model.configuration?.name?.toLowerCase() ?? \"nodefined\"\n\n        // criando a pasta que salva o SQL\n        const SQL_PATH = createPath(target_folder, \"sql\")\n        fs.writeFileSync(path.join(SQL_PATH, 'debezium.sql'), toString(generateDebeziumSQL(model)))\n\n        const REGISTER_PATH = createPath(target_folder, \"register\")\n        fs.writeFileSync(path.join(REGISTER_PATH, name+'-register.json'), toString(generateDebeziumRegister(model.configuration)))\n    }\n}\n\nfunction generateDebeziumSQL(model: Model): Generated{\n    return expandToStringWithNL`\n    ${model.abstractElements.filter(isModule).map(module => module.elements.filter(isLocalEntity).map(entity => !entity.is_abstract? `ALTER TABLE public.${entity.name.toLowerCase()}  REPLICA IDENTITY FULL;`: undefined).join('\\n')).join('\\n')}  \n    `\n  }\n\n  function generateDebeziumRegister (configuration: Configuration): Generated{\n\n    const name = configuration?.name?.toLowerCase() ?? \"nodefined\"\n\n\n    return expandToStringWithNL`\n    {\n      \"name\": \"${name}-connector\",\n      \"config\": {\n          \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",\n          \"tasks.max\": \"1\",\n          \"database.hostname\": \"db-pg\",\n          \"database.port\": \"5432\",\n          \"database.user\": \"postgres\",\n          \"database.password\": \"postgres\",\n          \"database.dbname\" : \"${name}\",\n          \"topic.prefix\": \"databases.${name}\",\n          \"topic.partitions\": 3,\n          \"schema.include.list\": \"public\"\n      }\n  }\n    \n    `\n  \n  }\n  ","import { expandToString } from \"langium/generate\";\nimport { EnumX } from \"../../shared/ast.js\";\n\nexport function generateEnum(enumx: EnumX, package_name: string) : string {\n  \n\n  return expandToString`\n    package ${package_name}.models;\n    \n    public enum ${enumx.name} {\n        ${enumx.attributes.map(a => `${a.name.toUpperCase()}` ).join(\",\\n\")}\n    }\n  `;\n}","import { Model } from \"../../shared/ast.js\";\r\nimport fs from \"fs\";\r\nimport { generateConfigs } from \"./config-generator.js\";\r\nimport { generateModules } from \"./module-generator.js\";\r\nimport { generateSchemaSQLHelper } from \"./sql-generator.js\";\r\nimport { generateDebezium } from \"./debezium-generator.js\";\r\n\r\nexport function generate(model: Model, target_folder: string) : void {\r\n    fs.mkdirSync(target_folder, {recursive:true})\r\n    \r\n    generateConfigs(model, target_folder);\r\n    generateModules(model, target_folder);\r\n    generateSchemaSQLHelper(model,target_folder);\r\n    generateDebezium(model,target_folder);\r\n  \r\n}\r\n  ","import path from \"path\";\nimport fs from \"fs\";\nimport { Attribute, ImportedEntity, LocalEntity, Model, Module, ModuleImport, isEnumX, isLocalEntity, isModule, isModuleImport } from \"../../shared/ast.js\";\nimport { createPath } from \"../../shared/generator-utils.js\";\nimport { RelationInfo, processRelations } from \"../../shared/relations.js\";\nimport { Generated, expandToStringWithNL, toString } from \"langium/generate\";\nimport { generateModel } from \"./model-generator.js\";\nimport { generateEnum } from \"./enum-generator.js\";\n\nexport function generateModules(model: Model, target_folder: string) : void {\n  \n  const package_path  = model.configuration?.package_path ?? 'base'\n\n  const modules =  model.abstractElements.filter(isModule);\n\n  const all_entities = modules.map(module => module.elements.filter(isLocalEntity)).flat()\n\n  const relation_maps = processRelations(all_entities)\n\n  const imported_entities = processImportedEntities(model)\n\n  for(const mod of modules) {\n    \n    const package_name      = `${package_path}.entity.${model.configuration?.name}.${mod.name.toLowerCase()}`\n    const MODULE_PATH       = createPath(target_folder, \"src/main/java/\", package_name.replaceAll(\".\",\"/\"))\n    const REPOSITORIES_PATH = createPath(MODULE_PATH, 'repositories')    \n    const MODELS_PATH       = createPath(MODULE_PATH, 'models')    \n\n    const supertype_classes = processSupertypes(mod)\n\n    const mod_classes = mod.elements.filter(isLocalEntity)\n    for(const cls of mod_classes) {\n      const class_name = cls.name\n      const {attributes, relations} = getAttrsAndRelations(cls, relation_maps)\n      \n      attributes\n\n      fs.writeFileSync(path.join(MODELS_PATH,`${class_name}.java`), toString(generateModel(cls, supertype_classes.has(cls), relations, package_name, imported_entities)))\n      if (!cls.is_abstract){\n        fs.writeFileSync(path.join(REPOSITORIES_PATH, `${class_name}Repository.java`), toString(generateClassRepository(cls, package_name, imported_entities)))\n      }\n      \n      \n    }\n\n    for (const enumx of mod.elements.filter(isEnumX)){\n      fs.writeFileSync(path.join(MODELS_PATH,`${enumx.name}.java`), generateEnum(enumx,package_name))\n    }\n  }\n}\n\nfunction processImportedEntities (application: Model): Map<ImportedEntity, ModuleImport | undefined> {\n  const map: Map<ImportedEntity, ModuleImport | undefined> = new Map()\n\n  for (const moduleImport of application.abstractElements.filter(isModuleImport)){\n    moduleImport.entities.map(importedEntity => map.set(importedEntity, moduleImport));\n  }\n\n  return map\n}\n\n\n/**\n * Dado um módulo, retorna todos as classes dele que são usadas como Superclasses\n */\nfunction processSupertypes(mod: Module) : Set<LocalEntity | undefined> {\n  const set: Set<LocalEntity | undefined> = new Set()\n  for(const cls of mod.elements.filter(isLocalEntity)) {\n    \n    if(cls.superType?.ref != null && isLocalEntity(cls.superType?.ref)) {\n      set.add(cls.superType?.ref)\n    }\n  }\n  return set\n}\n\n/**\n * Retorna todos os atributos e relações de uma Class, incluindo a de seus supertipos\n */\nfunction getAttrsAndRelations(cls: LocalEntity, relation_map: Map<LocalEntity, RelationInfo[]>) : {attributes: Attribute[], relations: RelationInfo[]} {\n  // Se tem superclasse, puxa os atributos e relações da superclasse\n  if(cls.superType?.ref != null && isLocalEntity(cls.superType?.ref)) {\n    const parent =  cls.superType?.ref\n    const {attributes, relations} = getAttrsAndRelations(parent, relation_map)\n\n    return {\n      attributes: attributes.concat(cls.attributes),\n      relations: relations.concat(relation_map.get(cls) ?? [])\n    }\n  } else {\n    return {\n      attributes: cls.attributes,\n      relations: relation_map.get(cls) ?? []\n    }\n  }\n}\n\nfunction generateClassRepository(cls: LocalEntity, package_name: string, importedEntities: Map<ImportedEntity, ModuleImport | undefined>) : Generated {\n  \n   \n  return expandToStringWithNL`\n    package ${package_name}.repositories;\n\n    import ${package_name}.models.${cls.name};\n    import org.springframework.data.repository.PagingAndSortingRepository;\n    import org.springframework.data.repository.ListCrudRepository;\n    import java.util.Optional;\n    import br.nemo.immigrant.ontology.entity.eo.teams.repositories.projections.IDProjection;\n\n    public interface ${cls.name}Repository extends PagingAndSortingRepository<${cls.name}, Long>, ListCrudRepository<${cls.name}, Long> {\n\n      Optional<IDProjection> findByExternalId(String externalId);\n\n      Optional<IDProjection> findByInternalId(String internalId);\n\n      Boolean existsByInternalId(String internalId);\n    \n    }\n  `\n}\n","import { LocalEntity, isLocalEntity } from \"./ast.js\"\n\n\nexport type RelationInfo = {\n  tgt: LocalEntity,\n  card: RelationType,\n  owner: boolean\n}\ntype RelationType = 'OneToMany' | 'OneToOne' | 'ManyToOne' | 'ManyToMany'\n \nfunction revert_card(card: RelationType) : RelationType {\n  switch(card) {\n  case 'OneToOne':\n    return 'OneToOne'\n  case 'OneToMany':\n    return 'ManyToOne'\n  case 'ManyToOne':\n    return 'OneToMany'\n  case 'ManyToMany':\n    return 'ManyToMany'\n  }\n}\n\n/**\n * Dado um módulo, lê todas as relações internas dele,\n * retornando um mapa que mapeia um Class para a lista\n * de {alvo, cardinalidade e ownership} de suas relações\n */\nexport function processRelations(\n  localEntities: LocalEntity[]\n) : Map<LocalEntity, RelationInfo[]> {\n  // Inicializa o mapa com listas vazias\n  const map: Map<LocalEntity, RelationInfo[]> = new Map()\n\n  for(const cls of localEntities) {\n    map.set(cls, new Array())\n  }\n  \n  const add_relation = (owner: LocalEntity, non_owner: LocalEntity, card_name: RelationType) => {\n    map.get(owner)?.push({\n      tgt: non_owner,\n      card: card_name,\n      owner: true\n    })\n    map.get(non_owner)?.push({\n      tgt: owner,\n      card: revert_card(card_name),\n      owner: false\n    })\n  }\n   \n  for(const entity of localEntities) {\n    \n    \n    for (const relationship of entity.relations){\n        \n        if (isLocalEntity(relationship.type.ref)){\n          if(relationship.$type === \"OneToMany\") {\n            add_relation(relationship.type.ref, entity, \"ManyToOne\")\n          } else {\n            add_relation(entity, relationship.type.ref, relationship.$type)\n          }\n        }\n    }\n  }\n\n  return map\n}\n","import { CompositeGeneratorNode, Generated, expandToString, expandToStringWithNL, toString } from \"langium/generate\"\nimport { Attribute, Entity, EnumEntityAtribute, ImportedEntity, LocalEntity, ModuleImport, isLocalEntity } from \"../../shared/ast.js\"\nimport { RelationInfo } from \"../../shared/relations.js\"\nimport { capitalizeString } from \"../../shared/generator-utils.js\"\n\n\nexport function generateModel(cls: LocalEntity, is_supertype: boolean, relations: RelationInfo[], package_name: string, importedEntities: Map<ImportedEntity, ModuleImport | undefined>) : Generated {\n  const supertype = cls.superType?.ref  \n  const is_abstract = cls?.is_abstract\n\n  const external_relations = relations.filter(relation => relation.tgt.$container != cls.$container)\n\n  return expandToStringWithNL`\n    package ${package_name}.models;\n\n    import lombok.Data;\n    import lombok.Builder;\n    import lombok.NoArgsConstructor;\n    import lombok.AllArgsConstructor;\n    import lombok.experimental.SuperBuilder;\n\n    import jakarta.persistence.*;\n\n    import java.io.Serializable;\n    import java.time.LocalDateTime;\n    import java.util.Set;\n    import java.util.HashSet;\n    import java.util.Objects;\n    import java.util.UUID;\n    import java.time.LocalDate;\n    import java.util.Date;\n\n    ${external_relations.map(relation => `import ${package_name.replace(cls.$container.name.toLowerCase(),relation.tgt.$container.name.toLowerCase())}.models.${relation.tgt.name};`).join('\\n')}\n    \n    ${supertype ? generateImportSuperEntity(package_name, cls, supertype, importedEntities) : undefined}\n    \n    @Data\n    ${is_abstract? undefined:`@Entity`}\n    @SuperBuilder\n    @NoArgsConstructor\n    @AllArgsConstructor\n    ${is_abstract? `@MappedSuperclass` : `@Table(name = \"${cls.name.toLowerCase()}\")`}        \n    ${!is_supertype ? '@Inheritance(strategy = InheritanceType.SINGLE_TABLE)' : undefined}\n    public ${is_abstract? `abstract` : undefined} class ${cls.name} ${supertype ? `extends ${supertype.name}` : ''} implements Serializable {\n        \n      ${is_abstract?`\n      @Id\n      protected @GeneratedValue (strategy=GenerationType.IDENTITY)\n      Long id;`: undefined}\n\n      ${!supertype && !is_abstract?`\n      @Id\n      private @GeneratedValue (strategy=GenerationType.IDENTITY)\n      Long id;`: undefined}\n      \n      ${cls.attributes.map(a => generateAttribute(a,is_abstract)).join('\\n')}\n      ${generateRelations(cls, relations)}\n      ${generateEnum(cls)}\n\n      @Builder.Default\n      private LocalDateTime createdAt = LocalDateTime.now();\n\n      @Override\n      public boolean equals(Object o) {\n              if (this == o) return true;\n              if (o == null || this.getClass() != o.getClass()) return false;\n\n            ${cls.name} elem = (${cls.name}) o;\n            return getId().equals(elem.getId());\n      }\n\n      @Override\n      public int hashCode() {\n        return Objects.hash(getId());\n      }\n\n      @Override\n      public String toString() {\n          return \"${cls.name} {\" +\n             \"id=\"+this.id+\n              ${cls.attributes.map(a => `\", ${a.name}='\"+this.${a.name}+\"'\"+`).join('\\n')}\n              ${isLocalEntity(supertype) ? supertype?.attributes.map(a => `\", ${a.name}='\"+this.${a.name}+\"'\"+`).join('\\n'): undefined}\n              ${cls.enumentityatributes.map(a => `\", ${a.name.toLowerCase()}='\"+this.${a.name.toLowerCase()}+\"'\"+`).join('\\n')}\n          '}';\n      }  \n    }\n  `\n}\n\nfunction generateImportSuperEntity (package_name: string, entity: Entity, supertype: Entity, importedEntities: Map<ImportedEntity, ModuleImport | undefined>):string {\n\n  if (isLocalEntity(supertype)){\n    return `import ${package_name.replace(entity.$container.name.toLowerCase(),generateImportEntity(supertype,importedEntities))}.models.${supertype.name};`\n  }\n  return `import br.nemo.immigrant.ontology.entity.${generateImportEntity(supertype,importedEntities)}.models.${supertype.name};` \n\n} \n\nfunction generateImportEntity (entity: Entity, importedEntities: Map<ImportedEntity, ModuleImport | undefined>): string {\n  if (isLocalEntity(entity)){\n    return `${entity.$container.name.toLowerCase()}`\n  }\n  const moduleImport = importedEntities.get(entity)\n\n  return `${moduleImport?.library.toLocaleLowerCase()}.${entity.$container.name.toLowerCase()}`\n}\n\nfunction generateAttribute(attribute:Attribute, is_abstract:Boolean): Generated{\n  return expandToStringWithNL`\n  ${generateUniqueCollumn(attribute)}\n  ${is_abstract? `protected`: `private`} ${capitalizeString(toString(generateTypeAttribute(attribute)) ?? 'NOTYPE')} ${attribute.name};\n  `\n}\n\nfunction generateUniqueCollumn(attribute: Attribute): Generated{\n  if (attribute?.unique){\n    return \"@Column(unique=true)\"\n  }\n  return \"\"\n}\n\nfunction generateTypeAttribute(attribute:Attribute): Generated{\n\n  if (attribute.type.toString().toLowerCase() === \"date\"){\n    return \"LocalDate\"\n  }\n  return attribute.type\n\n}\n\nfunction generateRelations(cls: LocalEntity, relations: RelationInfo[]) : Generated {\n  \n  const node = new CompositeGeneratorNode()\n\n  for(const rel of relations) {\n    node.append(generateRelation(cls, rel))\n    node.appendNewLine()\n  }\n  return node\n}\n\nfunction generateRelation(cls: LocalEntity, {tgt, card, owner}: RelationInfo) : Generated {\n  switch(card) {\n  case \"OneToOne\":\n    if(owner) {\n      return expandToStringWithNL`\n        @OneToOne\n        @JoinColumn(name = \"${tgt.name.toLowerCase()}_id\", referencedColumnName = \"id\")\n        private ${tgt.name} ${tgt.name.toLowerCase()};\n      `\n    } else {\n      return expandToStringWithNL`\n        @OneToOne(cascade = {CascadeType.ALL}, orphanRemoval = true, mappedBy = \"${cls.name.toLowerCase()}\")\n        @Builder.Default\n        private ${tgt.name} ${tgt.name.toLowerCase()} = null;\n      `\n    }\n  case \"OneToMany\":\n    if(owner) {\n      return ''\n    } else {\n      return expandToStringWithNL`\n        @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true, mappedBy = \"${cls.name.toLowerCase()}\")\n        @Builder.Default\n        Set<${tgt.name}> ${tgt.name.toLowerCase()}s = new HashSet<>();\n      `\n    }\n  case \"ManyToOne\":\n    if(owner) {\n      return expandToStringWithNL`\n        @ManyToOne\n        @JoinColumn(name = \"${tgt.name.toLowerCase()}_id\")\n        private ${tgt.name} ${tgt.name.toLowerCase()};\n      `\n    } else {\n      return ''\n    }\n  case \"ManyToMany\":\n    if(owner) {\n      return expandToStringWithNL`\n        @ManyToMany\n        @JoinTable(\n            name = \"${cls.name.toLowerCase()}_${tgt.name.toLowerCase()}\",\n            joinColumns = @JoinColumn(name = \"${cls.name.toLowerCase()}_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"${tgt.name.toLowerCase()}_id\")\n        )\n        @Builder.Default\n        private Set<${tgt.name}> ${tgt.name.toLowerCase()}s = new HashSet<>();\n      `\n    } else {\n      return expandToStringWithNL`\n        @ManyToMany(mappedBy = \"${cls.name.toLowerCase()}s\")\n        @Builder.Default\n        private Set<${tgt.name}> ${tgt.name.toLowerCase()}s = new HashSet<>();\n      `\n    }\n  }\n}\n\nfunction createEnum(enumEntityAtribute: EnumEntityAtribute):string {\n  return expandToString`\n  @Builder.Default\n  @Enumerated(EnumType.STRING)\n  private ${enumEntityAtribute.type.ref?.name} ${enumEntityAtribute.name.toLowerCase()} = ${enumEntityAtribute.type.ref?.name}.${enumEntityAtribute.type.ref?.attributes[0].name.toUpperCase()};\n  `\n}\n\nfunction generateEnum (cls: LocalEntity):string {\n  return expandToStringWithNL`\n  ${cls.enumentityatributes.map(enumEntityAtribute =>createEnum(enumEntityAtribute)).join(\"\\n\")}\n  `\n}","import path from 'path'\nimport fs from 'fs'\nimport { createPath } from '../../shared/generator-utils.js';\nimport { Attribute, LocalEntity, Model, isLocalEntity, isModule } from '../../shared/ast.js';\nimport { Generated, expandToString, expandToStringWithNL, toString } from 'langium/generate';\n\nexport function generateSchemaSQLHelper(model: Model, target_folder: string) {\n\n    if (model.configuration){\n        // criando a pasta que salva o SQL\n        const SQL_PATH = createPath(target_folder, \"sql\")\n        fs.writeFileSync(path.join(SQL_PATH, 'sql_unique_constrains.sql'), toString(generateSQL(model)))\n        \n    }\n}\n\nfunction generateSQLCommand (entity: LocalEntity ): Generated {\n  \n  var atributesUnique: Array<Attribute> = [];\n  \n  for (const attribute of entity.attributes){\n    if (attribute?.unique && !entity.is_abstract){\n      atributesUnique.push (attribute);\n    }\n  }\n  if (atributesUnique.length ){\n    return  expandToString`\n  ALTER TABLE public.${entity.name.toLowerCase()} ADD CONSTRAINT ${entity.name.toLowerCase()}_unique_constrain UNIQUE (${atributesUnique.map(a => `${a.name}`).join(`,`)});\n  `\n  }\n  return undefined\n  \n}\n\n\n\nfunction generateSQL(model:Model): Generated{\n    return expandToStringWithNL`\n    ${model.abstractElements.filter(isModule).map(module => module.elements.filter(isLocalEntity).map(entity => generateSQLCommand(entity)).join('\\n')).join('\\n')}  \n    `\n}\n\n  ","export * from \"./config-generator.js\";\r\nexport * from \"./generator.js\";\r\nexport * from \"./graphql-generator.js\";\r\nexport * from \"./module-generator.js\";\r\n","import path from 'path'\nimport fs from 'fs'\nimport { createPath } from '../../shared/generator-utils.js'\nimport { Generated, expandToStringWithNL, toString } from 'langium/generate'\nimport { Configuration, Model, ModuleImport, isModuleImport } from '../../shared/ast.js'\n\nexport function generateConfigs(model: Model, target_folder: string) {\n  \n \n  if (model.configuration){\n    \n    fs.writeFileSync(path.join(target_folder, 'Dockerfile'), toString(generateDockerFile()))\n    fs.writeFileSync(path.join(target_folder, 'docker-compose-database.yml'), toString(generateComposeDatabase(model.configuration)))\n    fs.writeFileSync(path.join(target_folder, 'docker-compose.yml'), toString(generateCompose(model.configuration)))\n    \n    const RESOURCE_PATH = createPath(target_folder, \"src/main/resources\")\n    fs.writeFileSync(path.join(target_folder, 'pom.xml'), toString(generatePOMXML(model)))\n    fs.writeFileSync(path.join(RESOURCE_PATH, 'logback.xml'), toString(generatelogback()))\n    fs.writeFileSync(path.join(RESOURCE_PATH, 'application.properties'), toString(applicationProperties(model.configuration)))\n\n\n  }\n  \n}\n\nfunction generateDockerFile():Generated{\n  return expandToStringWithNL`\n  # Use an official Maven image as the base image\n  FROM maven:3.8.4-openjdk-17-slim\n\n  # Set the working directory inside the container\n  WORKDIR /app\n\n  # Copy the Maven project file and download dependencies\n  COPY pom.xml .\n  RUN mvn dependency:go-offline\n\n  # Copy the application source code\n  COPY src ./src\n\n  # Build the application\n  RUN mvn package\n\n  # Expose the port that the application will run on\n  EXPOSE 8080\n\n  # Specify the command to run your application\n  CMD [\"mvn\", \"spring-boot:run\"]\n\n  `\n}\n\n\nfunction applicationProperties(configuration: Configuration):Generated{\n  return expandToStringWithNL`\n  spring.datasource.initialization-mode=always\n  spring.datasource.url =  jdbc:postgresql://localhost:5432/${configuration.database_name}\n  spring.datasource.username = postgres\n  spring.datasource.password = postgres\n  spring.datasource.platform= postgres\n  #spring.jpa.hibernate.ddl-auto = update\n  spring.jpa.hibernate.ddl-auto = create-drop\n  \n  spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata\n  spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create-drop\n  spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=sql/${configuration.database_name?.toLowerCase()}.sql\n  spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=sql/${configuration.database_name?.toLowerCase()}.sql\n\n  logging.level.org.hibernate.SQL=DEBUG\n  server.port=8081\n\n  springdoc.swagger-ui.path=/\n  springdoc.packagesToScan=${configuration.package_path}.*\n\n  spring.graphql.graphiql.enabled: true\n  spring.graphql.schema.locations=classpath:graphql/ \n  spring.graphql.schema.fileExtensions=.graphqls, .gqls\n  `\n}\nfunction generatelogback(): Generated{\n  return expandToStringWithNL`\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <configuration>\n      <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n          <encoder>\n              <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n              </pattern>\n          </encoder>\n      </appender>\n\n      <root level=\"INFO\">\n          <appender-ref ref=\"STDOUT\" />\n      </root>\n  </configuration>\n  `\n}\n\nfunction generatePOMXML(application: Model) : Generated {\n\n  const name = application.configuration?.name?.toLocaleLowerCase()\n\n  return expandToStringWithNL`\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.1.0</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>${application.configuration?.package_path?.toLocaleLowerCase()}.service.</groupId>\n\t<artifactId>${name}</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>${name}</name>\n\t<description>${application.configuration?.description}</description>\n\t<properties>\n\t\t<java.version>17</java.version>\n        <start-class>${application.configuration?.package_path}.service.${name}.application.Application</start-class>\n\t</properties>\n\n  <repositories>\n  <repository>\n    <id>gitlab-maven</id>\n    <url>https://gitlab.com/api/v4/groups/#change/-/packages/maven</url>\n  </repository>\n</repositories>\n\n\n\t<dependencies>\n\n    <dependency>\n      <groupId>${application.configuration?.package_path}.entity</groupId>\n      <artifactId>${name}</artifactId>\n      <version>0.0.1-SNAPSHOT</version>\n    </dependency>\n\n    ${application.abstractElements.filter(isModuleImport).map(moduleImport => generateOntologyDependency(moduleImport)).join(\"\\n\")}\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-rest</artifactId>\n\t\t</dependency>\n    <dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n    <dependency>\n        <groupId>org.postgresql</groupId>\n        <artifactId>postgresql</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-commons</artifactId>\n    </dependency>\n\n\n    <dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n  \n<dependency>\n    <groupId>org.springdoc</groupId>\n    <artifactId>springdoc-openapi-starter-common</artifactId>\n    <version>2.0.2</version>\n</dependency>\n\n<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-graphql</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n   <dependency>\n      <groupId>org.springdoc</groupId>\n      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n      <version>2.0.2</version>\n   </dependency>\n\n\n\n\n\t</dependencies>\n\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n  `\n}\n\nfunction generateOntologyDependency(moduleImported: ModuleImport):Generated{\n  \n  return expandToStringWithNL`\n  <dependency>\n  <groupId>${moduleImported.package_path.toLowerCase()}</groupId>\n  <artifactId>${moduleImported.library.toLowerCase()}</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n</dependency>\n  `\n}\nfunction generateCompose(configuration: Configuration) : Generated {\n  \n  const name = configuration.name?.toLocaleLowerCase()\n\n  return expandToStringWithNL`\n  version: '3.9'\n  services:\n    ontology_service:\n      container_name: ${name}_service\n      build: .\n      image: registry.gitlab.com/immigrant-data-driven-development/services/${name}\n      ports:\n        - \"8080:8080\"\n  networks: \n    default: \n      name: base-infrastrutrure\n      external: true\n  \n  `\n}\n\n\nfunction generateComposeDatabase(configuration: Configuration) : Generated {\n\n  const projectName = configuration.name?.toLocaleLowerCase()\n  const databaseName = configuration.database_name?.toLocaleLowerCase()\n  return expandToStringWithNL`\n    version: '3.7'\n\n    services:\n      postgres:\n        image: postgres\n        ports:\n          - \"5432:5432\"\n        restart: always\n        environment:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: ${databaseName ?? projectName ?? '-'}\n          POSTGRES_USER: postgres\n        volumes:\n          - ./data:/var/lib/postgresql\n          - ./pg-initdb.d:/docker-entrypoint-initdb.d\n  `\n}\n\n","import { Model } from \"../../shared/ast.js\";\r\nimport fs from \"fs\";\r\nimport { generateConfigs } from \"./config-generator.js\";\r\nimport { generateModules } from \"./module-generator.js\";\r\nimport { generateGraphQL } from \"./graphql-generator.js\";\r\n\r\nexport function generate(model: Model, target_folder: string) : void {\r\n    fs.mkdirSync(target_folder, {recursive:true})\r\n    \r\n     generateConfigs(model, target_folder);\r\n     generateModules(model, target_folder);\r\n     generateGraphQL(model, target_folder);\r\n\r\n}\r\n  ","import path from \"path\";\nimport fs from \"fs\";\nimport { Attribute, Configuration, LocalEntity, Model, isLocalEntity, isModule } from \"../../shared/ast.js\";\nimport { capitalizeString, createPath } from \"../../shared/generator-utils.js\";\nimport { Generated, expandToString, expandToStringWithNL, toString } from \"langium/generate\";\n\n\nexport function generateModules(model: Model, target_folder: string) : void {\n  \n  const package_path  = model.configuration?.package_path ?? 'base'\n\n  const modules =  model.abstractElements.filter(isModule);\n\n\n  if (model.configuration){\n    const package_name_application      = `${package_path}.service.${model.configuration?.name?.toLocaleLowerCase()}.application`\n    const APPLICATION_PATH       = createPath(target_folder, \"src/main/java/\", package_name_application.replaceAll(\".\",\"/\"))\n    fs.writeFileSync(path.join(APPLICATION_PATH,`Application.java`), applicationGenerator(package_name_application, model.configuration))\n  }\n  \n\n\n  for(const mod of modules) {\n    \n    const package_name      = `${package_path}.service.${model.configuration?.name?.toLocaleLowerCase()}.${mod.name.toLowerCase()}`\n    const MODULE_PATH       = createPath(target_folder, \"src/main/java/\", package_name.replaceAll(\".\",\"/\"))\n    const REPOSITORIES_PATH = createPath(MODULE_PATH, 'repositories')\n    const CONTROLLERS_PATH = createPath(MODULE_PATH, 'controllers') \n    const RECORDS_PATH = createPath(MODULE_PATH, 'records')    \n    \n    const mod_classes = mod.elements.filter(isLocalEntity)\n    for(const cls of mod_classes) {\n      const class_name = cls.name\n    \n      if (!cls.is_abstract){\n        fs.writeFileSync(path.join(REPOSITORIES_PATH, `${class_name}RepositoryWeb.java`), toString(generateClassRepository(cls, package_name)))\n        fs.writeFileSync(path.join(CONTROLLERS_PATH, `${class_name}Controller.java`), toString(generateClassController(cls, package_name)))\n        fs.writeFileSync(path.join(RECORDS_PATH, `${class_name}Input.java`), toString(generateRecord(cls, package_name)))\n        \n      }\n    }\n  }\n}\n\nfunction applicationGenerator(path_package: string, configuration: Configuration):string{\n  return expandToStringWithNL`\n  package ${path_package};\n\n  import org.springframework.boot.SpringApplication;\n  import org.springframework.boot.autoconfigure.SpringBootApplication;\n  import org.springframework.boot.SpringApplication;\n  import org.springframework.boot.autoconfigure.SpringBootApplication;\n  import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n  import org.springframework.boot.autoconfigure.*;\n  import org.springframework.context.annotation.*;\n  import org.springframework.boot.autoconfigure.domain.EntityScan;\n  import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n\n  import io.swagger.v3.oas.annotations.OpenAPIDefinition;\n  import io.swagger.v3.oas.annotations.info.Info;\n\n  @SpringBootApplication\n  @EnableAutoConfiguration\n  @ComponentScan(basePackages = {\"${path_package.replace(\"application\", \"\")}*\"})\n  @EntityScan(basePackages = {\"${path_package.replace(\"application\", \"\").replace(\"service\",\"entity\")}*\"})\n  @EnableJpaRepositories(basePackages = {\"${path_package.replace(\"application\", \"\")}*\"})\n  @OpenAPIDefinition(info = @Info(\n    title = \"${configuration.name?? \"-\"}\", \n    version = \"1.0\", \n    description = \"${configuration.description}\"))\n\n  public class Application {\n\n    public static void main(String[] args) {\n      SpringApplication.run(Application.class, args);\n    }\n  }\n  `\n  \n}\n\n\nfunction generateClassRepository(cls: LocalEntity, package_name: string) : Generated {\n  return expandToStringWithNL`\n    package ${package_name}.repositories;\n\n    import ${package_name.replace(\"service\",\"entity\")}.models.${cls.name};\n    import ${package_name.replace(\"service\",\"entity\")}.repositories.${cls.name}Repository;\n\n    import org.springframework.data.rest.core.annotation.RestResource;\n    import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n\n    @RepositoryRestResource(collectionResourceRel = \"${cls.name.toLowerCase()}\", path = \"${cls.name.toLowerCase()}\")\n    public interface ${cls.name}RepositoryWeb extends ${cls.name}Repository {\n    \n    }\n  `\n}\n\nfunction generateRecord(cls: LocalEntity, package_name: string) : Generated {\n\n  var att = cls.attributes\n  if (isLocalEntity(cls.superType?.ref)){\n    att = cls.attributes.concat(cls.superType?.ref?.attributes ?? [] )\n  }\n\n  return expandToStringWithNL`\n  package ${package_name}.records;\n  import java.time.LocalDate;\n  public record ${cls.name}Input( ${att.map(att => generateRecordAtribute(att)).join(',')} ) {\n  }\n  `\n}\n\nfunction generateRecordAtribute (attribute:Attribute): Generated{\nreturn expandToString`\n${capitalizeString(toString(generateTypeAttribute(attribute))) ??'Not Type'} ${attribute.name} \n`\n}\n\nfunction generateTypeAttribute(attribute:Attribute): Generated{\n\n  if (attribute.type.toString().toLowerCase() === \"date\"){\n    return \"LocalDate\"\n  }\n  return attribute.type\n\n}\n\n\nfunction generateClassController(cls: LocalEntity, package_name: string) : Generated {\n\n  var att = cls.attributes\n  if (isLocalEntity(cls.superType?.ref)){\n    att = cls.attributes.concat(cls.superType?.ref?.attributes ?? [] )\n  }\n\n  return expandToStringWithNL`\n    package ${package_name}.controllers;\n\n    import ${package_name.replace(\"service\",\"entity\")}.models.${cls.name};\n    import ${package_name.replace(\"service\",\"entity\")}.repositories.${cls.name}Repository;\n    import ${package_name}.records.${cls.name}Input;\n\n    import org.springframework.beans.factory.annotation.Autowired;\n    \n    import org.springframework.graphql.data.method.annotation.Argument;\n    import org.springframework.graphql.data.method.annotation.MutationMapping;\n    import org.springframework.graphql.data.method.annotation.QueryMapping;\n    \n    import org.springframework.stereotype.Controller;\n\n    import java.util.List;\n\n    @Controller\n    public class ${cls.name}Controller  {\n\n      @Autowired\n      ${cls.name}Repository repository;\n\n      @QueryMapping\n      public List<${cls.name}> findAll${cls.name}s() {\n        return repository.findAll();\n      }\n\n      @QueryMapping\n      public ${cls.name} findByID${cls.name}(@Argument Long id) {\n        return repository.findById(id).orElse(null);\n      }\n\n      /* https://github.com/danvega/graphql-books\n      Usar isso para relacao entre os conceitos https://www.danvega.dev/blog/2023/03/20/graphql-mutations/\n      */\n\n      @MutationMapping\n      public ${cls.name} create${cls.name}(@Argument ${cls.name}Input input) {\n        ${cls.name} instance = ${cls.name}.builder().${att.map(att => `${att.name}(input.${att.name}())`).join(\".\\n\")}.build();  \n\n        return repository.save(instance);\n      }\n\n      @MutationMapping\n      public ${cls.name} update${cls.name}(@Argument Long id, @Argument ${cls.name}Input input) {\n        ${cls.name} instance = repository.findById(id).orElse(null);\n        if(instance == null) {\n            throw new RuntimeException(\"${cls.name} not found\");\n        }\n        ${att.map(att => `instance.set${capitalizeString(att.name)}(input.${att.name}());`).join(\"\\n\")}\n        repository.save(instance);\n        return instance;\n      }\n      \n      @MutationMapping\n      public void delete${cls.name}(@Argument Long id) {\n        repository.deleteById(id);\n      }\n    \n    }\n  `\n}\n\n","import path from 'path'\nimport fs from 'fs'\nimport { createPath } from '../../shared/generator-utils.js'\nimport { LocalEntity, Model, isLocalEntity, isModule } from '../../shared/ast.js'\nimport { Generated, expandToStringWithNL, toString } from 'langium/generate'\n//Relation\n\n\nexport function generateGraphQL(application: Model, target_folder: string) {\n    if (application.configuration){\n\n        const RESOURCE_PATH = createPath(target_folder, \"src/main/resources\")\n        const GRAPHQL_PATH = createPath(RESOURCE_PATH, \"graphql\")\n\n        fs.writeFileSync(path.join(GRAPHQL_PATH, 'schema.graphqls'), toString(generateSchemaGraphQL(application)))\n        \n        \n    }\n}\n/*\nfunction generateRelationSchemaGraphQL(relation: Relation): Generated{\n    switch(relation.$type) {\n      case \"OneToMany\": return `[${relation.type.ref?.name}]`\n      default: return `${relation.type.ref?.name}`\n    }\n    return \"\"\n  }\n  */\n  function generateTypeSchemaGraphQL (entity: LocalEntity): Generated{\n\n    var att = entity.attributes;\n    if (isLocalEntity(entity.superType?.ref)) {\n      att = entity.attributes.concat(entity.superType?.ref?.attributes ?? [] )\n    }\n    \n    //var relation = entity.relations.concat(entity.superType?.ref?.relations ?? [] )\n    //${relation.map(relation => `${relation.name}:${generateRelationSchemaGraphQL(relation)}`).join(\"\\n\")}\n    return expandToStringWithNL`\n    type ${entity.name}{\n        id: ID!\n        ${att.map(atribute => `${atribute.name}:String!`).join(\"\\n\")}\n    }\n    `\n  }\n  \n  function generateInputTypeSchemaGraphQL(entity: LocalEntity): Generated{\n    var att = entity.attributes;  \n    if (isLocalEntity(entity.superType?.ref)){\n      att = entity.attributes.concat(entity.superType?.ref?.attributes ?? [] )\n    }\n    \n    //var relation = entity.relations.concat(entity.superType?.ref?.relations ?? [] )\n    //${relation.map(relation => `${relation.name}ID:String`).join(\"\\n\")}\n    return expandToStringWithNL`\n    input ${entity.name}Input{\n      ${att.map(atribute => `${atribute.name}:String!`).join(\"\\n\")}\n    }\n    `\n  }\n  \n  function generateSchemaGraphQL (application: Model): Generated{\n\n    const modules = application.abstractElements.filter(isModule);\n    const all_entities = modules.map(module => module.elements.filter(isLocalEntity)).flat();\n\n    return expandToStringWithNL`\n    \n    ${all_entities.map(entity => entity.is_abstract ? \"\": toString(generateTypeSchemaGraphQL(entity))).join(\"\\n\")}\n    \n    ${all_entities.map(entity => entity.is_abstract ? \"\":  toString(generateInputTypeSchemaGraphQL(entity))).join(\"\\n\")}\n  \n    type Query{\n      ${all_entities.map(entity => entity.is_abstract ? \"\": `findAll${entity.name}s:[${entity.name}]`).join(\"\\n\")}\n      ${all_entities.map(entity => entity.is_abstract ? \"\": `findByID${entity.name} (id: ID!):${entity.name}`).join(\"\\n\")}\n    }\n    \n    type Mutation{\n      ${all_entities.map(entity => entity.is_abstract ? \"\": `create${entity.name}(input: ${entity.name}Input):${entity.name}`).join(\"\\n\")}\n      ${all_entities.map(entity => entity.is_abstract ? \"\": `delete${entity.name} (id: ID!):${entity.name}`).join(\"\\n\")}\n      ${all_entities.map(entity => entity.is_abstract ? \"\": `update${entity.name} (id: ID!, input: ${entity.name}Input):${entity.name}`).join(\"\\n\")}\n    }`\n  }","import fs from \"fs\";\r\nimport path from 'path'\r\nimport { expandToStringWithNL } from \"langium/generate\";\r\nimport { Configuration, Model } from \"../../shared/ast.js\";\r\n\r\n\r\nexport function generate(model: Model, target_folder: string) : void {\r\n    fs.mkdirSync(target_folder, {recursive:true})\r\n  \r\n    if (model.configuration){\r\n        fs.writeFileSync(path.join(target_folder, 'README.md'),createProjectReadme(model.configuration))\r\n        fs.writeFileSync(path.join(target_folder, '.gitlab-ci.yml'),createGitlab())\r\n    } \r\n   \r\n  \r\n}\r\n\r\nfunction createGitlab():string{\r\n    return expandToStringWithNL`\r\n    variables:\r\n    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG\r\n    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest\r\n\r\n    stages:\r\n    - build-entity\r\n    - build-webservice\r\n    - release-webservice\r\n\r\n    maven-build:\r\n    stage: build-entity\r\n    image: maven:latest\r\n    script: \r\n        - cd entity\r\n        - mvn deploy -s settings.xml -DskipTests\r\n\r\n    build-webservice:\r\n    stage: build-webservice\r\n    image: docker:20.10.16\r\n    services:\r\n        - docker:20.10.16-dind\r\n    before_script:\r\n        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\r\n    script:\r\n        - cd webservice\r\n        - docker build --pull -t $CONTAINER_TEST_IMAGE .\r\n        - docker push $CONTAINER_TEST_IMAGE\r\n\r\n    release-master-webservice:\r\n    stage: release-webservice\r\n    image: docker:20.10.16\r\n    services:\r\n        - docker:20.10.16-dind\r\n    before_script:\r\n        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\r\n    script:\r\n        - cd webservice\r\n        - docker pull $CONTAINER_TEST_IMAGE\r\n        - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE\r\n        - docker push $CONTAINER_RELEASE_IMAGE\r\n    only:\r\n        - main\r\n\r\n    release-dev-webservice:\r\n    stage: release-webservice\r\n    script:\r\n        - cd webservice\r\n        - docker pull $CONTAINER_TEST_IMAGE\r\n        - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_TEST_IMAGE\r\n        - docker push $CONTAINER_TEST_IMAGE\r\n    only:\r\n        - dev\r\n\r\n    `\r\n}\r\n\r\nfunction stackREADME (): string {\r\n    return expandToStringWithNL`\r\n        1. Spring Boot 3.0\r\n        2. Spring Data Rest\r\n        3. Spring GraphQL\r\n        \r\n    `\r\n\r\n}\r\n\r\nfunction createProjectReadme(configuration: Configuration): string{\r\n    return expandToStringWithNL`\r\n    # ${configuration.name}\r\n    ## 🚀 Goal\r\n    ${configuration.description}\r\n\r\n    ## 📕 Domain Documentation\r\n    \r\n    Domain documentation can be found [here](./docs/README.md)\r\n\r\n    ## ⚙️ Requirements\r\n\r\n    1. Postgresql\r\n    2. Java 17\r\n    3. Maven\r\n\r\n    ## ⚙️ Stack \r\n    ${stackREADME()}\r\n\r\n    ## 🔧 Install\r\n\r\n    1) Create a database with name ${configuration.name} with **CREATE DATABASE ${configuration.name}**.\r\n    2) Run the command to start the webservice and create table of database:\r\n\r\n    \\`\\`\\`bash\r\n    mvn Spring-boot:run \r\n    \\`\\`\\`\r\n\r\n    ## Debezium\r\n\r\n    Go to folder named *register* and performs following command to register in debezium:\r\n\r\n    \\`\\`\\`bash\r\n    curl -i -X POST -H \"Accept:application/json\" -H  \"Content-Type:application/json\" http://localhost:8083/connectors/ -d @register-sro.json\r\n    \\`\\`\\`\r\n\r\n    To delete, uses:\r\n\r\n    \\`\\`\\`bash\r\n    curl -i -X DELETE localhost:8083/connectors/sro-connector/\r\n    \\`\\`\\`\r\n        \r\n    \r\n    ## 🔧 Usage\r\n\r\n    * Access [http://localhost:8081](http://localhost:8081) to see Swagger \r\n    * Access [http://localhost:8081/grapiql](http://localhost:8081/grapiql) to see Graphql.\r\n\r\n    `\r\n}"],"mappings":"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","names":["generate","import_path","import_fs","path","fs","fs","path","import_path","import_fs","import_generate","fs","path","module","import_generate","import_fs","import_path","import_fs","import_generate","import_generate","generateEnum","module","fs","path","import_path","import_fs","import_generate","fs","path","module","fs","generate","generateConfigs","generateModules","import_path","import_fs","import_generate","generateConfigs","fs","path","generatePOMXML","generatelogback","applicationProperties","generateOntologyDependency","import_fs","import_path","import_fs","import_generate","generateModules","fs","path","generateClassRepository","att","generateTypeAttribute","import_path","import_fs","import_generate","fs","path","module","generate","fs","generateConfigs","generateModules","import_fs","import_path","import_generate","generate","fs","path"]}