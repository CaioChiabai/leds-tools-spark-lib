/******************************************************************************
 * This file was generated by langium-cli 3.0.3.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import { AbstractAstReflection } from 'langium';
export const SPARKTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    INT: /[0-9]+/,
    STRING: /"[^"]*"|'[^']*'/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};
export const AbstractElement = 'AbstractElement';
export function isAbstractElement(item) {
    return reflection.isInstance(item, AbstractElement);
}
export function isDATATYPE(item) {
    return item === 'string' || item === 'integer' || item === 'decimal' || item === 'datetime' || item === 'date' || item === 'boolean' || item === 'uuid' || item === 'email' || item === 'cpf' || item === 'cnpj' || item === 'zipcode' || item === 'currency' || item === 'mobilePhoneNumber' || item === 'phoneNumber' || item === 'file' || item === 'void';
}
export const Entity = 'Entity';
export function isEntity(item) {
    return reflection.isInstance(item, Entity);
}
export function isFEATURE_TYPE(item) {
    return item === 'authentication';
}
export function isLANGUAGETYPE(item) {
    return item === 'python' || item === 'java' || item === 'csharp-minimal-api' || item === 'csharp-clean-architecture';
}
export function isQualifiedName(item) {
    return typeof item === 'string';
}
export function isQualifiedNameWithWildcard(item) {
    return typeof item === 'string';
}
export const Relation = 'Relation';
export function isRelation(item) {
    return reflection.isInstance(item, Relation);
}
export const UseCaseElements = 'UseCaseElements';
export function isUseCaseElements(item) {
    return reflection.isInstance(item, UseCaseElements);
}
export const Actor = 'Actor';
export function isActor(item) {
    return reflection.isInstance(item, Actor);
}
export const Attribute = 'Attribute';
export function isAttribute(item) {
    return reflection.isInstance(item, Attribute);
}
export const AttributeEnum = 'AttributeEnum';
export function isAttributeEnum(item) {
    return reflection.isInstance(item, AttributeEnum);
}
export const Configuration = 'Configuration';
export function isConfiguration(item) {
    return reflection.isInstance(item, Configuration);
}
export const Element = 'Element';
export function isElement(item) {
    return reflection.isInstance(item, Element);
}
export const EnumEntityAtribute = 'EnumEntityAtribute';
export function isEnumEntityAtribute(item) {
    return reflection.isInstance(item, EnumEntityAtribute);
}
export const EnumX = 'EnumX';
export function isEnumX(item) {
    return reflection.isInstance(item, EnumX);
}
export const Event = 'Event';
export function isEvent(item) {
    return reflection.isInstance(item, Event);
}
export const FunctionEntity = 'FunctionEntity';
export function isFunctionEntity(item) {
    return reflection.isInstance(item, FunctionEntity);
}
export const ImportedEntity = 'ImportedEntity';
export function isImportedEntity(item) {
    return reflection.isInstance(item, ImportedEntity);
}
export const LocalEntity = 'LocalEntity';
export function isLocalEntity(item) {
    return reflection.isInstance(item, LocalEntity);
}
export const ManyToMany = 'ManyToMany';
export function isManyToMany(item) {
    return reflection.isInstance(item, ManyToMany);
}
export const ManyToOne = 'ManyToOne';
export function isManyToOne(item) {
    return reflection.isInstance(item, ManyToOne);
}
export const Model = 'Model';
export function isModel(item) {
    return reflection.isInstance(item, Model);
}
export const Module = 'Module';
export function isModule(item) {
    return reflection.isInstance(item, Module);
}
export const ModuleImport = 'ModuleImport';
export function isModuleImport(item) {
    return reflection.isInstance(item, ModuleImport);
}
export const OneToMany = 'OneToMany';
export function isOneToMany(item) {
    return reflection.isInstance(item, OneToMany);
}
export const OneToOne = 'OneToOne';
export function isOneToOne(item) {
    return reflection.isInstance(item, OneToOne);
}
export const Parameter = 'Parameter';
export function isParameter(item) {
    return reflection.isInstance(item, Parameter);
}
export const UseCase = 'UseCase';
export function isUseCase(item) {
    return reflection.isInstance(item, UseCase);
}
export const UseCasesModel = 'UseCasesModel';
export function isUseCasesModel(item) {
    return reflection.isInstance(item, UseCasesModel);
}
export class SPARKAstReflection extends AbstractAstReflection {
    getAllTypes() {
        return ['AbstractElement', 'Actor', 'Attribute', 'AttributeEnum', 'Configuration', 'Element', 'Entity', 'EnumEntityAtribute', 'EnumX', 'Event', 'FunctionEntity', 'ImportedEntity', 'LocalEntity', 'ManyToMany', 'ManyToOne', 'Model', 'Module', 'ModuleImport', 'OneToMany', 'OneToOne', 'Parameter', 'Relation', 'UseCase', 'UseCaseElements', 'UseCasesModel'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case Actor:
            case UseCase: {
                return this.isSubtype(UseCaseElements, supertype);
            }
            case EnumX:
            case Module: {
                return this.isSubtype(AbstractElement, supertype);
            }
            case ImportedEntity:
            case LocalEntity: {
                return this.isSubtype(Entity, supertype);
            }
            case ManyToMany:
            case ManyToOne:
            case OneToMany:
            case OneToOne: {
                return this.isSubtype(Relation, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Actor:superType':
            case 'UseCase:actors': {
                return Actor;
            }
            case 'Configuration:entity':
            case 'LocalEntity:superType':
            case 'ManyToMany:type':
            case 'ManyToOne:type':
            case 'OneToMany:type':
            case 'OneToOne:type': {
                return Entity;
            }
            case 'EnumEntityAtribute:type': {
                return EnumX;
            }
            case 'Event:depends': {
                return Event;
            }
            case 'ManyToMany:by': {
                return LocalEntity;
            }
            case 'UseCase:superType': {
                return UseCase;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'Actor': {
                return {
                    name: 'Actor',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'id' },
                        { name: 'superType' }
                    ]
                };
            }
            case 'Attribute': {
                return {
                    name: 'Attribute',
                    properties: [
                        { name: 'blank', defaultValue: false },
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'max' },
                        { name: 'min' },
                        { name: 'name' },
                        { name: 'type' },
                        { name: 'unique', defaultValue: false }
                    ]
                };
            }
            case 'AttributeEnum': {
                return {
                    name: 'AttributeEnum',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' }
                    ]
                };
            }
            case 'Configuration': {
                return {
                    name: 'Configuration',
                    properties: [
                        { name: 'database_name' },
                        { name: 'description' },
                        { name: 'entity' },
                        { name: 'feature' },
                        { name: 'language' },
                        { name: 'name' },
                        { name: 'package_path' }
                    ]
                };
            }
            case 'Element': {
                return {
                    name: 'Element',
                    properties: [
                        { name: 'comment' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'EnumEntityAtribute': {
                return {
                    name: 'EnumEntityAtribute',
                    properties: [
                        { name: 'comment' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'EnumX': {
                return {
                    name: 'EnumX',
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'comment' },
                        { name: 'name' }
                    ]
                };
            }
            case 'Event': {
                return {
                    name: 'Event',
                    properties: [
                        { name: 'action' },
                        { name: 'depends', defaultValue: [] },
                        { name: 'description' },
                        { name: 'id' },
                        { name: 'name_fragment' }
                    ]
                };
            }
            case 'FunctionEntity': {
                return {
                    name: 'FunctionEntity',
                    properties: [
                        { name: 'comment' },
                        { name: 'name' },
                        { name: 'paramters', defaultValue: [] },
                        { name: 'response' }
                    ]
                };
            }
            case 'ImportedEntity': {
                return {
                    name: 'ImportedEntity',
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case 'LocalEntity': {
                return {
                    name: 'LocalEntity',
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'comment' },
                        { name: 'enumentityatributes', defaultValue: [] },
                        { name: 'functions', defaultValue: [] },
                        { name: 'is_abstract', defaultValue: false },
                        { name: 'name' },
                        { name: 'relations', defaultValue: [] },
                        { name: 'superType' }
                    ]
                };
            }
            case 'ManyToMany': {
                return {
                    name: 'ManyToMany',
                    properties: [
                        { name: 'by' },
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'ManyToOne': {
                return {
                    name: 'ManyToOne',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    properties: [
                        { name: 'abstractElements', defaultValue: [] },
                        { name: 'configuration' }
                    ]
                };
            }
            case 'Module': {
                return {
                    name: 'Module',
                    properties: [
                        { name: 'comment' },
                        { name: 'elements', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case 'ModuleImport': {
                return {
                    name: 'ModuleImport',
                    properties: [
                        { name: 'entities', defaultValue: [] },
                        { name: 'library' },
                        { name: 'name' },
                        { name: 'package_path' }
                    ]
                };
            }
            case 'OneToMany': {
                return {
                    name: 'OneToMany',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'OneToOne': {
                return {
                    name: 'OneToOne',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'Parameter': {
                return {
                    name: 'Parameter',
                    properties: [
                        { name: 'comment' },
                        { name: 'element' }
                    ]
                };
            }
            case 'UseCase': {
                return {
                    name: 'UseCase',
                    properties: [
                        { name: 'actors', defaultValue: [] },
                        { name: 'comment' },
                        { name: 'description' },
                        { name: 'events', defaultValue: [] },
                        { name: 'id' },
                        { name: 'name_fragment' },
                        { name: 'superType' }
                    ]
                };
            }
            case 'UseCasesModel': {
                return {
                    name: 'UseCasesModel',
                    properties: [
                        { name: 'comment' },
                        { name: 'elements', defaultValue: [] },
                        { name: 'id' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
export const reflection = new SPARKAstReflection();
